DGraphDemo1:
==================================================
Vertices:
V(A, in: 0, out: 1)
V(B, in: 2, out: 1)
V(C, in: 0, out: 2)
V(D, in: 2, out: 0)
------------------------------
Edges:
E(A,B,0)
E(B,D,0)
E(C,B,0)
E(C,D,0)
==================================================

DGraphDemo2:
==================================================
Vertices:
V(A, in: 0, out: 1)
V(B, in: 2, out: 1)
V(C, in: 0, out: 2)
V(D, in: 2, out: 0)template<class T>
class TopoSorter {
public:
    enum SortMethod { BFS, DFS };

    TopoSorter(DGraphModel<T>* graph) : graph(graph) {}

    DLinkedList<T> sort(SortMethod method) {
        switch(method) {
            case BFS: return bfsTopologicalSort();
            case DFS: return dfsTopologicalSort();
            default: throw runtime_error("Invalid sorting method");
        }
    }

private:
    DGraphModel<T>* graph;

    DLinkedList<T> bfsTopologicalSort() {
        // Kahn's algorithm for topological sorting
        DLinkedList<T> result;
        DLinkedList<T> vertices = graph->vertices();
        unordered_map<T, int> inDegrees;

        // Calculate in-degrees
        for (auto v : vertices) {
            inDegrees[v] = graph->inDegree(v);
        }

        queue<T> zeroInDegree;
        for (auto v : vertices) {
            if (inDegrees[v] == 0) {
                zeroInDegree.push(v);
            }
        }

        while (!zeroInDegree.empty()) {
            T current = zeroInDegree.front();
            zeroInDegree.pop();
            result.add(current);

            for (auto neighbor : graph->getOutwardEdges(current)) {
                inDegrees[neighbor]--;
                if (inDegrees[neighbor] == 0) {
                    zeroInDegree.push(neighbor);
                }
            }
        }

        return result;
    }

    DLinkedList<T> dfsTopologicalSort() {
        // DFS-based topological sorting
        DLinkedList<T> result;
        unordered_set<T> visited;
        unordered_set<T> recursionStack;

        for (auto v : graph->vertices()) {
            if (!visited.count(v)) {
                dfsVisit(v, visited, recursionStack, result);
            }
        }

        // Reverse the list to get correct order using BWDIterator
        DLinkedList<T> reversedResult;
        for (typename DLinkedList<T>::BWDIterator it = result.bbegin(); 
             it != result.bend(); ++it) {
            reversedResult.add(*it);
        }

        return reversedResult;
    }

    void dfsVisit(T vertex, 
                  unordered_set<T>& visited, 
                  unordered_set<T>& recursionStack, 
                  DLinkedList<T>& result) {
        visited.insert(vertex);
        recursionStack.insert(vertex);

        for (auto neighbor : graph->getOutwardEdges(vertex)) {
            if (!visited.count(neighbor)) {
                dfsVisit(neighbor, visited, recursionStack, result);
            }
        }

        recursionStack.erase(vertex);
        result.add(vertex);
    }
};
------------------------------
Edges:
E(A,B,0)
E(B,D,0)
E(C,B,0)
E(C,D,0)
==================================================

Topo-order:    [A, C, B, D]
DGraphDemo3:
==================================================
Vertices:
V(0, in: 1, out: 2)
V(1, in: 2, out: 1)
V(2, in: 3, out: 0)
V(3, in: 0, out: 4)
V(4, in: 2, out: 1)
V(5, in: 1, out: 0)
V(6, in: 0, out: 3)
V(7, in: 3, out: 0)
V(8, in: 2, out: 2)
V(9, in: 0, out: 1)
------------------------------
Edges:
E(0,1,0)
E(0,5,0)
E(1,7,0)
E(3,2,0)
E(3,4,0)
E(3,7,0)
E(3,8,0)
E(4,8,0)
E(6,0,0)
E(6,1,0)
E(6,2,0)
E(8,2,0)
E(8,7,0)
E(9,4,0)
==================================================

Topo-order (BFS): [3, 6, 9, 0, 4, 1, 5, 8, 2, 7]
Topo-order (DFS): [9, 6, 3, 4, 8, 2, 0, 5, 1, 7]
DijkstraDemo
==================================================
Vertices:
V(0, in: 0, out: 3)
V(1, in: 3, out: 2)
V(2, in: 3, out: 2)
V(3, in: 3, out: 0)
V(4, in: 1, out: 3)
------------------------------
Edges:
E(0,1,5)
E(0,2,3)
E(0,4,2)
E(1,2,2)
E(1,3,6)
E(2,1,1)
E(2,3,2)
E(4,1,6)
E(4,2,10)
E(4,3,4)
==================================================

Dijkstra output:
path:   (0->0: 0) Path: 0
path:   (0->1: 4) Path: 0 2 1
path:   (0->2: 3) Path: 0 2
path:   (0->3: 5) Path: 0 2 3
path:   (0->4: 2) Path: 0 4